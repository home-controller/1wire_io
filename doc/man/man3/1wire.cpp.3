.TH "src/1wire.cpp" 3 "Sun Jun 19 2022" "Version 0.0.2" "1-wire" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/1wire.cpp \- works with 1-wire chip IO with the chips stored in eeprom and the state in ram\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <Arduino\&.h>\fP
.br
\fC#include <1wire\&.h>\fP
.br
\fC#include <ui_io\&.h>\fP
.br
\fC#include <OneWire\&.h>\fP
.br
\fC#include <avr/pgmspace\&.h>\fP
.br
\fC#include <defs\&.h>\fP
.br
\fC#include <EEPROM\&.h>\fP
.br
\fC#include <store\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB_1wire_cpp\fP"
.br
.ti -1c
.RI "#define \fBARDUINO\fP   10808"
.br
.ti -1c
.RI "#define \fBDS2405_FAMILY_ID\fP   0x5"
.br
.ti -1c
.RI "#define \fBDS18S20_FAMILY_ID\fP   0x10"
.br
.ti -1c
.RI "#define \fBDS2406_FAMILY_ID\fP   0x12"
.br
.ti -1c
.RI "#define \fBDS2407_FAMILY_ID\fP   0x12"
.br
.ti -1c
.RI "#define \fBDS18B20_FAMILY_ID\fP   0x28"
.br
.ti -1c
.RI "#define \fBDS2408_FAMILY_ID\fP   0x29"
.br
.ti -1c
.RI "#define \fBDS2413_FAMILY_ID\fP   0x3A"
.br
.ti -1c
.RI "#define \fBDS2413clone_FAMILY_ID\fP   0x85"
.br
.ti -1c
.RI "#define \fB_3A_2100H_FAMILY_ID\fP   0x85"
.br
.ti -1c
.RI "#define \fBnum1wireIDs\fP   sizeof(type1wireChip)"
.br
.ti -1c
.RI "#define \fBDS2413_ACCESS_READ\fP   0xF5"
.br
.ti -1c
.RI "#define \fBDS2413_ACCESS_WRITE\fP   0x5A"
.br
.ti -1c
.RI "#define \fBDS2413_ACK_SUCCESS\fP   0xAA"
.br
.ti -1c
.RI "#define \fBDS2413_ACK_ERROR\fP   0xFF"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int16_t \fBget1wireIDsIndex\fP (byte element)"
.br
.RI "set 1-wire chip output\&. Also updates arrays holding info on switched state etc\&. "
.ti -1c
.RI "byte \fBget1wireIDfromIndex\fP (byte id)"
.br
.RI "Returns the index into the arrays type1wireChip[i] and onewireSwitchIO[x]\&. "
.ti -1c
.RI "byte \fBget1wireIOno\fP (byte i)"
.br
.RI "Get the number of IO pins the chip has, i\&.e\&. 8 for the DS2408\&. "
.ti -1c
.RI "byte \fBget1wireIdFIA\fP (byte i)"
.br
.ti -1c
.RI "byte \fBget1wireChipTypeIOPins\fP (byte chipType)"
.br
.RI "Returns the number of IO pins the 1-wire chip has\&. "
.ti -1c
.RI "void \fBio_print1wireAddr\fP (byte addr[])"
.br
.ti -1c
.RI "void \fBprintChipInfo\fP (byte id)"
.br
.ti -1c
.RI "void \fBtest_printChipInfo\fP ()"
.br
.ti -1c
.RI "byte \fBreadDS2413\fP (OneWire &o, byte addr[])"
.br
.ti -1c
.RI "bool \fBtestDS2413\fP (OneWire &o, byte addr[])"
.br
.ti -1c
.RI "bool \fBtest1wireIO\fP (OneWire &o, byte addr[])"
.br
.ti -1c
.RI "byte \fBread1wireIO\fP (OneWire &o, byte addr[])"
.br
.ti -1c
.RI "bool \fBwriteDS2413\fP (OneWire &o, byte addr[], byte state)"
.br
.RI "write output to a 1-wire DS2413 chip\&. "
.ti -1c
.RI "bool \fBwrite1wireIO\fP (OneWire &o, byte addr[], byte state)"
.br
.RI "Writes bitmap to 1-wire pin IO Register(Sets all the IO pins on the 1-wire chip)\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "byte \fBoneWireState\fP [\fBdefMaxNo_1wireChips\fP]"
.br
.RI "todo should probably get rid of global vars\&. "
.ti -1c
.RI "const int \fBIOA\fP = B00000001"
.br
.ti -1c
.RI "const int \fBIOB\fP = 0x2"
.br
.in -1c
.SH "Detailed Description"
.PP 
works with 1-wire chip IO with the chips stored in eeprom and the state in ram\&. 


.PP
\fBAuthor\fP
.RS 4
Joseph (you@domain.com) 
.RE
.PP
\fBVersion\fP
.RS 4
0\&.0\&.2 
.RE
.PP
\fBDate\fP
.RS 4
2021-11-25
.RE
.PP
\fBCopyright\fP
.RS 4
Copyright (c) 2021
.RE
.PP
Mostly to work with 1-wire chip IO with the chips stored in eeprom\&. handles 20 chips and 3 1-wire buses on there own 3 pins
.PP
To change that you will need to edit the header\&. 
.PP
Definition in file \fB1wire\&.cpp\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define _1wire_cpp"

.PP
Definition at line \fB17\fP of file \fB1wire\&.cpp\fP\&.
.SS "#define _3A_2100H_FAMILY_ID   0x85"

.PP
Definition at line \fB50\fP of file \fB1wire\&.cpp\fP\&.
.SS "#define ARDUINO   10808"

.PP
Definition at line \fB30\fP of file \fB1wire\&.cpp\fP\&.
.SS "#define DS18B20_FAMILY_ID   0x28"

.PP
Definition at line \fB46\fP of file \fB1wire\&.cpp\fP\&.
.SS "#define DS18S20_FAMILY_ID   0x10"

.PP
Definition at line \fB43\fP of file \fB1wire\&.cpp\fP\&.
.SS "#define DS2405_FAMILY_ID   0x5"

.PP
Definition at line \fB42\fP of file \fB1wire\&.cpp\fP\&.
.SS "#define DS2406_FAMILY_ID   0x12"

.PP
Definition at line \fB44\fP of file \fB1wire\&.cpp\fP\&.
.SS "#define DS2407_FAMILY_ID   0x12"

.PP
Definition at line \fB45\fP of file \fB1wire\&.cpp\fP\&.
.SS "#define DS2408_FAMILY_ID   0x29"

.PP
Definition at line \fB47\fP of file \fB1wire\&.cpp\fP\&.
.SS "#define DS2413_ACCESS_READ   0xF5"

.PP
Definition at line \fB179\fP of file \fB1wire\&.cpp\fP\&.
.SS "#define DS2413_ACCESS_WRITE   0x5A"

.PP
Definition at line \fB180\fP of file \fB1wire\&.cpp\fP\&.
.SS "#define DS2413_ACK_ERROR   0xFF"

.PP
Definition at line \fB182\fP of file \fB1wire\&.cpp\fP\&.
.SS "#define DS2413_ACK_SUCCESS   0xAA"

.PP
Definition at line \fB181\fP of file \fB1wire\&.cpp\fP\&.
.SS "#define DS2413_FAMILY_ID   0x3A"

.PP
Definition at line \fB48\fP of file \fB1wire\&.cpp\fP\&.
.SS "#define DS2413clone_FAMILY_ID   0x85"

.PP
Definition at line \fB49\fP of file \fB1wire\&.cpp\fP\&.
.SS "#define num1wireIDs   sizeof(type1wireChip)"

.PP
Definition at line \fB54\fP of file \fB1wire\&.cpp\fP\&.
.SH "Function Documentation"
.PP 
.SS "byte get1wireChipTypeIOPins (byte chipType)"

.PP
Returns the number of IO pins the 1-wire chip has\&. 
.PP
\fBParameters\fP
.RS 4
\fIchipType\fP the 1-wire chip type id e\&.g\&. 0x85(DS2413clone_FAMILY_ID)\&. 
.RE
.PP
\fBReturns\fP
.RS 4
byte 
.RE
.PP

.PP
Definition at line \fB170\fP of file \fB1wire\&.cpp\fP\&.
.SS "byte get1wireIdFIA (byte i)"

.PP
Definition at line \fB159\fP of file \fB1wire\&.cpp\fP\&.
.SS "byte get1wireIDfromIndex (byte id)"

.PP
Returns the index into the arrays type1wireChip[i] and onewireSwitchIO[x]\&. more or less the same thing as get1wireIDsIndex although you would think from the name it was the opposite\&.
.PP
\fBParameters\fP
.RS 4
\fIid\fP the chip type id eg\&. 0x85 for DS2413clone_FAMILY_ID 
.RE
.PP
\fBReturns\fP
.RS 4
byte 
.RE
.PP

.PP
Definition at line \fB134\fP of file \fB1wire\&.cpp\fP\&.
.SS "int16_t get1wireIDsIndex (byte element)"

.PP
set 1-wire chip output\&. Also updates arrays holding info on switched state etc\&. This will return the index of the chip in the 2 arrays type1wireChip[x] & onewireSwitchIO[x] eg use get1wireIOno(get1wireIDsIndex( addr[0] ) ); to get the number of IO pins/channels for chip in the working vars etc\&.
.PP
Gets the array index index from the chip type id
.PP
\fBParameters\fP
.RS 4
\fIelement\fP chip type code referenced in fist byte of addrs from 1-wire chips 
.RE
.PP
\fBReturns\fP
.RS 4
int16_t return the index or -1 if chip type not found\&. 
.RE
.PP

.PP
Definition at line \fB102\fP of file \fB1wire\&.cpp\fP\&.
.SS "byte get1wireIOno (byte i)"

.PP
Get the number of IO pins the chip has, i\&.e\&. 8 for the DS2408\&. 
.PP
\fBParameters\fP
.RS 4
\fIi\fP the index into the array\&. use \fBget1wireChipTypeIOPins()\fP chip type id\&. 
.RE
.PP
\fBReturns\fP
.RS 4
byte number of IO pins\&.
.RE
.PP

.PP
Definition at line \fB154\fP of file \fB1wire\&.cpp\fP\&.
.SS "void io_print1wireAddr (byte addr[])"

.PP
Definition at line \fB431\fP of file \fB1wire\&.cpp\fP\&.
.SS "void printChipInfo (byte id)"

.PP
Definition at line \fB549\fP of file \fB1wire\&.cpp\fP\&.
.SS "byte read1wireIO (OneWire & o, byte addr[])"

.PP
Definition at line \fB702\fP of file \fB1wire\&.cpp\fP\&.
.SS "byte readDS2413 (OneWire & o, byte addr[])"

.PP
Definition at line \fB675\fP of file \fB1wire\&.cpp\fP\&.
.SS "bool test1wireIO (OneWire & o, byte addr[])"

.PP
Definition at line \fB695\fP of file \fB1wire\&.cpp\fP\&.
.SS "void test_printChipInfo ()"

.PP
Definition at line \fB566\fP of file \fB1wire\&.cpp\fP\&.
.SS "bool testDS2413 (OneWire & o, byte addr[])"

.PP
Definition at line \fB687\fP of file \fB1wire\&.cpp\fP\&.
.SS "bool write1wireIO (OneWire & o, byte addr[], byte state)"

.PP
Writes bitmap to 1-wire pin IO Register(Sets all the IO pins on the 1-wire chip)\&. Takes a pointer to a 1-wire class objects from the standard Arduino OneWire libary initialized with the pin number etc\&. and a chip address on that pin/bus and the sets the IO Register on the 1-wire ship\&. Chip IO pins are a Mosfet so High impedance(off) and open drain(short to 0v)\&.
.PP
\fBParameters\fP
.RS 4
\fIo\fP Pointer to a 1-wire bus/pin class object\&. 
.br
\fIaddr\fP 8 byte long array 1-wire chip address\&. [0] is the chip type and [7] the crc\&. 
.br
\fIstate\fP bitmask of IO output wanted\&. 0b11 should pull OIA and IOB low and 0 set them to off, high impedance? 
.RE
.PP
\fBReturns\fP
.RS 4
true for successes or false for fail\&. 
.RE
.PP

.PP
Definition at line \fB780\fP of file \fB1wire\&.cpp\fP\&.
.SS "bool writeDS2413 (OneWire & o, byte addr[], byte state)"

.PP
write output to a 1-wire DS2413 chip\&. Each instance of the OneWire class stores it's pin as a reg + bitmap for direct access\&.
.PP
DS2413 can only pull the IO pins to ground\&. Open drain Mosfet keeps settings for quite awhile even with no power\&.
.PP
\fBParameters\fP
.RS 4
\fIo\fP OneWire object of class OneWire\&. From the standard lib, look at the Arduino website manual for more info\&. 
.br
\fIaddr\fP 8 byte array\&. Chip type code, 6 bytes of address and CRC 
.br
\fIstate\fP bitmap of IO pin state sent to the 1-wire chip IO register\&. 
.RE
.PP
\fBReturns\fP
.RS 4
true for success\&. 
.RE
.PP

.PP
Definition at line \fB733\fP of file \fB1wire\&.cpp\fP\&.
.SH "Variable Documentation"
.PP 
.SS "const int IOA = B00000001"

.PP
Definition at line \fB189\fP of file \fB1wire\&.cpp\fP\&.
.SS "const int IOB = 0x2"

.PP
Definition at line \fB190\fP of file \fB1wire\&.cpp\fP\&.
.SS "byte oneWireState[\fBdefMaxNo_1wireChips\fP]"

.PP
todo should probably get rid of global vars\&. 
.PP
Definition at line \fB77\fP of file \fB1wire\&.cpp\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for 1-wire from the source code\&.
